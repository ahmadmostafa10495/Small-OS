
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000a74  00000b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000064  00800064  00800064  00000b0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010f0  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c8  00000000  00000000  00002406  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00002ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000572  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001030  00000000  00000000  0000341e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  0000444e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_5>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_9>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_11>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	94 02       	muls	r25, r20
  56:	9b 02       	muls	r25, r27
  58:	a2 02       	muls	r26, r18
  5a:	a9 02       	muls	r26, r25
  5c:	b0 02       	muls	r27, r16
  5e:	b7 02       	muls	r27, r23
  60:	be 02       	muls	r27, r30

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e4 e7       	ldi	r30, 0x74	; 116
  76:	fa e0       	ldi	r31, 0x0A	; 10
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a4 36       	cpi	r26, 0x64	; 100
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a4 e6       	ldi	r26, 0x64	; 100
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a8 3c       	cpi	r26, 0xC8	; 200
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  98:	0c 94 38 05 	jmp	0xa70	; 0xa70 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <LED0>:
#include "CPUSleep.h"
#include "interrupt.h"

void LED0(void)
{
	DIO_Toggle(GPIOB, PIN0);
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  a8:	08 95       	ret

000000aa <LED1>:
}
void LED1(void)
{
	DIO_Toggle(GPIOB, PIN1);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  b2:	08 95       	ret

000000b4 <LED2>:
}
void LED2(void)
{
	DIO_Toggle(GPIOB, PIN2);
  b4:	64 e0       	ldi	r22, 0x04	; 4
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  bc:	08 95       	ret

000000be <LED3>:
}
void LED3(void)
{
	DIO_Toggle(GPIOB, PIN3);
  be:	68 e0       	ldi	r22, 0x08	; 8
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  c6:	08 95       	ret

000000c8 <LED4>:
}
void LED4(void)
{
	DIO_Toggle(GPIOB, PIN4);
  c8:	60 e1       	ldi	r22, 0x10	; 16
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  d0:	08 95       	ret

000000d2 <LED5>:
}
void LED5(void)
{
	DIO_Toggle(GPIOB, PIN5);
  d2:	60 e2       	ldi	r22, 0x20	; 32
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  da:	08 95       	ret

000000dc <LED6>:
}
void LED6(void)
{
	DIO_Toggle(GPIOB, PIN6);
  dc:	60 e4       	ldi	r22, 0x40	; 64
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  e4:	08 95       	ret

000000e6 <LED7>:
}
void LED7(void)
{
	DIO_Toggle(GPIOB, PIN7);
  e6:	60 e8       	ldi	r22, 0x80	; 128
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 96 01 	call	0x32c	; 0x32c <DIO_Toggle>
  ee:	08 95       	ret

000000f0 <main>:
}

int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	1f 92       	push	r1
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	sei();
  fc:	78 94       	sei
	DIO_Cfg_s DIO_Info = {GPIOB, FULL_PORT, OUTPUT};
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	8a 83       	std	Y+2, r24	; 0x02
 106:	8b 83       	std	Y+3, r24	; 0x03
	DIO_init(&DIO_Info);
 108:	ce 01       	movw	r24, r28
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	0e 94 ed 00 	call	0x1da	; 0x1da <DIO_init>
	DIO_Write(GPIOB, FULL_PORT, LOW);
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	6f ef       	ldi	r22, 0xFF	; 255
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_Write>
	SOS_Init();
 11a:	0e 94 47 04 	call	0x88e	; 0x88e <SOS_Init>
	SOS_CreateTask(LED4, 5000, 5);
 11e:	45 e0       	ldi	r20, 0x05	; 5
 120:	68 e8       	ldi	r22, 0x88	; 136
 122:	73 e1       	ldi	r23, 0x13	; 19
 124:	84 e6       	ldi	r24, 0x64	; 100
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>
	SOS_CreateTask(LED5, 6000, 6);
 12c:	46 e0       	ldi	r20, 0x06	; 6
 12e:	60 e7       	ldi	r22, 0x70	; 112
 130:	77 e1       	ldi	r23, 0x17	; 23
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>
	SOS_CreateTask(LED6, 7000, 7);
 13a:	47 e0       	ldi	r20, 0x07	; 7
 13c:	68 e5       	ldi	r22, 0x58	; 88
 13e:	7b e1       	ldi	r23, 0x1B	; 27
 140:	8e e6       	ldi	r24, 0x6E	; 110
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>
	SOS_CreateTask(LED7, 8000, 8);
 148:	48 e0       	ldi	r20, 0x08	; 8
 14a:	60 e4       	ldi	r22, 0x40	; 64
 14c:	7f e1       	ldi	r23, 0x1F	; 31
 14e:	83 e7       	ldi	r24, 0x73	; 115
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>
	SOS_CreateTask(LED0, 1000, 1);
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	68 ee       	ldi	r22, 0xE8	; 232
 15a:	73 e0       	ldi	r23, 0x03	; 3
 15c:	80 e5       	ldi	r24, 0x50	; 80
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>
	SOS_CreateTask(LED1, 2000, 2);
 164:	42 e0       	ldi	r20, 0x02	; 2
 166:	60 ed       	ldi	r22, 0xD0	; 208
 168:	77 e0       	ldi	r23, 0x07	; 7
 16a:	85 e5       	ldi	r24, 0x55	; 85
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>
	SOS_CreateTask(LED2, 3000, 3);
 172:	43 e0       	ldi	r20, 0x03	; 3
 174:	68 eb       	ldi	r22, 0xB8	; 184
 176:	7b e0       	ldi	r23, 0x0B	; 11
 178:	8a e5       	ldi	r24, 0x5A	; 90
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>
	SOS_CreateTask(LED3, 4000, 4);
 180:	44 e0       	ldi	r20, 0x04	; 4
 182:	60 ea       	ldi	r22, 0xA0	; 160
 184:	7f e0       	ldi	r23, 0x0F	; 15
 186:	8f e5       	ldi	r24, 0x5F	; 95
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 9a 04 	call	0x934	; 0x934 <SOS_CreateTask>

	CPUSleep_Init();
 18e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CPUSleep_Init>
	CPUSleep_setMode(CPUSLEEP_IDLE_MODE);
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <CPUSleep_setMode>
	SOS_Run();
 198:	0e 94 c0 04 	call	0x980	; 0x980 <SOS_Run>
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <CPUSleep_Init>:
 * 							
 */
ERROR_STATUS 
CPUSleep_Init(void)
{
	CPUSleep_status = CPUSLEEP_INIT;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	80 93 65 00 	sts	0x0065, r24
	return E_OK;
}
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <CPUSleep_enable>:
 * 							
 */
ERROR_STATUS 
CPUSleep_enable(void)
{
	MCUCR |= SE;
 1b6:	85 b7       	in	r24, 0x35	; 53
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	85 bf       	out	0x35, r24	; 53
	asm("SLEEP");
 1bc:	88 95       	sleep
	return E_OK;
}
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret

000001c2 <CPUSleep_setMode>:
 * 							
 */
ERROR_STATUS 
CPUSleep_setMode(uint8 mode)
{
	gu8_CPUSleep_mode = mode;
 1c2:	80 93 64 00 	sts	0x0064, r24
	MCUCR &= 0x0F;
 1c6:	85 b7       	in	r24, 0x35	; 53
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	85 bf       	out	0x35, r24	; 53
	MCUCR |= gu8_CPUSleep_mode;
 1cc:	95 b7       	in	r25, 0x35	; 53
 1ce:	80 91 64 00 	lds	r24, 0x0064
 1d2:	89 2b       	or	r24, r25
 1d4:	85 bf       	out	0x35, r24	; 53
	return E_OK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 95       	ret

000001da <DIO_init>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_init (DIO_Cfg_s *DIO_info)
{
	if (!(DIO_info == NULL))
 1da:	00 97       	sbiw	r24, 0x00	; 0
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_init+0x6>
 1de:	57 c0       	rjmp	.+174    	; 0x28e <DIO_init+0xb4>
	{
		switch(DIO_info->dir)
 1e0:	fc 01       	movw	r30, r24
 1e2:	22 81       	ldd	r18, Z+2	; 0x02
 1e4:	22 23       	and	r18, r18
 1e6:	19 f0       	breq	.+6      	; 0x1ee <DIO_init+0x14>
 1e8:	2f 3f       	cpi	r18, 0xFF	; 255
 1ea:	59 f1       	breq	.+86     	; 0x242 <DIO_init+0x68>
 1ec:	52 c0       	rjmp	.+164    	; 0x292 <DIO_init+0xb8>
		{
			case INPUT:
			switch (DIO_info->GPIO)
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 81       	ld	r18, Z
 1f2:	21 30       	cpi	r18, 0x01	; 1
 1f4:	71 f0       	breq	.+28     	; 0x212 <DIO_init+0x38>
 1f6:	28 f0       	brcs	.+10     	; 0x202 <DIO_init+0x28>
 1f8:	22 30       	cpi	r18, 0x02	; 2
 1fa:	99 f0       	breq	.+38     	; 0x222 <DIO_init+0x48>
 1fc:	23 30       	cpi	r18, 0x03	; 3
 1fe:	c9 f0       	breq	.+50     	; 0x232 <DIO_init+0x58>
 200:	4a c0       	rjmp	.+148    	; 0x296 <DIO_init+0xbc>
			{
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
 202:	2a b3       	in	r18, 0x1a	; 26
 204:	fc 01       	movw	r30, r24
 206:	81 81       	ldd	r24, Z+1	; 0x01
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	8a bb       	out	0x1a, r24	; 26
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch (DIO_info->GPIO)
			{
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
				break;
 210:	08 95       	ret
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
 212:	27 b3       	in	r18, 0x17	; 23
 214:	fc 01       	movw	r30, r24
 216:	81 81       	ldd	r24, Z+1	; 0x01
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	87 bb       	out	0x17, r24	; 23
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOA:
				PORTA_DIR &= ~DIO_info->pins;
				break;
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
				break;
 220:	08 95       	ret
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
 222:	24 b3       	in	r18, 0x14	; 20
 224:	fc 01       	movw	r30, r24
 226:	81 81       	ldd	r24, Z+1	; 0x01
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 22e:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOB:
				PORTB_DIR &= ~DIO_info->pins;
				break;
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
				break;
 230:	08 95       	ret
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
 232:	21 b3       	in	r18, 0x11	; 17
 234:	fc 01       	movw	r30, r24
 236:	81 81       	ldd	r24, Z+1	; 0x01
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 23e:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOC:
				PORTC_DIR &= ~DIO_info->pins;
				break;
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
				break;
 240:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
			case OUTPUT:
			switch (DIO_info->GPIO)
 242:	fc 01       	movw	r30, r24
 244:	20 81       	ld	r18, Z
 246:	21 30       	cpi	r18, 0x01	; 1
 248:	69 f0       	breq	.+26     	; 0x264 <DIO_init+0x8a>
 24a:	28 f0       	brcs	.+10     	; 0x256 <DIO_init+0x7c>
 24c:	22 30       	cpi	r18, 0x02	; 2
 24e:	89 f0       	breq	.+34     	; 0x272 <DIO_init+0x98>
 250:	23 30       	cpi	r18, 0x03	; 3
 252:	b1 f0       	breq	.+44     	; 0x280 <DIO_init+0xa6>
 254:	22 c0       	rjmp	.+68     	; 0x29a <DIO_init+0xc0>
			{
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
 256:	2a b3       	in	r18, 0x1a	; 26
 258:	fc 01       	movw	r30, r24
 25a:	81 81       	ldd	r24, Z+1	; 0x01
 25c:	82 2b       	or	r24, r18
 25e:	8a bb       	out	0x1a, r24	; 26
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch (DIO_info->GPIO)
			{
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
				break;
 262:	08 95       	ret
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
 264:	27 b3       	in	r18, 0x17	; 23
 266:	fc 01       	movw	r30, r24
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	82 2b       	or	r24, r18
 26c:	87 bb       	out	0x17, r24	; 23
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 26e:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOA:
				PORTA_DIR |= DIO_info->pins;
				break;
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
				break;
 270:	08 95       	ret
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
 272:	24 b3       	in	r18, 0x14	; 20
 274:	fc 01       	movw	r30, r24
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	82 2b       	or	r24, r18
 27a:	84 bb       	out	0x14, r24	; 20
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 27c:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOB:
				PORTB_DIR |= DIO_info->pins;
				break;
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
				break;
 27e:	08 95       	ret
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
 280:	21 b3       	in	r18, 0x11	; 17
 282:	fc 01       	movw	r30, r24
 284:	81 81       	ldd	r24, Z+1	; 0x01
 286:	82 2b       	or	r24, r18
 288:	81 bb       	out	0x11, r24	; 17
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
 28a:	80 e0       	ldi	r24, 0x00	; 0
				case GPIOC:
				PORTC_DIR |= DIO_info->pins;
				break;
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
				break;
 28c:	08 95       	ret
			return E_NOK;
		}
	}
	else
	{
		return E_NOK;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret
				default:
				return E_NOK;
			}
			break;
			default:
			return E_NOK;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	08 95       	ret
				break;
				case GPIOD:
				PORTD_DIR &= ~DIO_info->pins;
				break;
				default:
				return E_NOK;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
				break;
				case GPIOD:
				PORTD_DIR |= DIO_info->pins;
				break;
				default:
				return E_NOK;
 29a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		return E_NOK;
	}
	return E_OK;
}
 29c:	08 95       	ret

0000029e <DIO_Write>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_Write (uint8 GPIO, uint8 pins, uint8 value)
{
	switch(value)
 29e:	44 23       	and	r20, r20
 2a0:	19 f0       	breq	.+6      	; 0x2a8 <DIO_Write+0xa>
 2a2:	4f 3f       	cpi	r20, 0xFF	; 255
 2a4:	09 f1       	breq	.+66     	; 0x2e8 <DIO_Write+0x4a>
 2a6:	3c c0       	rjmp	.+120    	; 0x320 <DIO_Write+0x82>
	{
		case LOW:
		switch (GPIO)
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	61 f0       	breq	.+24     	; 0x2c4 <DIO_Write+0x26>
 2ac:	28 f0       	brcs	.+10     	; 0x2b8 <DIO_Write+0x1a>
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	79 f0       	breq	.+30     	; 0x2d0 <DIO_Write+0x32>
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	99 f0       	breq	.+38     	; 0x2dc <DIO_Write+0x3e>
 2b6:	36 c0       	rjmp	.+108    	; 0x324 <DIO_Write+0x86>
		{
			case GPIOA:
			PORTA_DATA &= ~pins;
 2b8:	8b b3       	in	r24, 0x1b	; 27
 2ba:	60 95       	com	r22
 2bc:	68 23       	and	r22, r24
 2be:	6b bb       	out	0x1b, r22	; 27
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
		case LOW:
		switch (GPIO)
		{
			case GPIOA:
			PORTA_DATA &= ~pins;
			break;
 2c2:	08 95       	ret
			case GPIOB:
			PORTB_DATA &= ~pins;
 2c4:	88 b3       	in	r24, 0x18	; 24
 2c6:	60 95       	com	r22
 2c8:	68 23       	and	r22, r24
 2ca:	68 bb       	out	0x18, r22	; 24
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOA:
			PORTA_DATA &= ~pins;
			break;
			case GPIOB:
			PORTB_DATA &= ~pins;
			break;
 2ce:	08 95       	ret
			case GPIOC:
			PORTC_DATA &= ~pins;
 2d0:	85 b3       	in	r24, 0x15	; 21
 2d2:	60 95       	com	r22
 2d4:	68 23       	and	r22, r24
 2d6:	65 bb       	out	0x15, r22	; 21
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOB:
			PORTB_DATA &= ~pins;
			break;
			case GPIOC:
			PORTC_DATA &= ~pins;
			break;
 2da:	08 95       	ret
			case GPIOD:
			PORTD_DATA &= ~pins;
 2dc:	82 b3       	in	r24, 0x12	; 18
 2de:	60 95       	com	r22
 2e0:	68 23       	and	r22, r24
 2e2:	62 bb       	out	0x12, r22	; 18
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOC:
			PORTC_DATA &= ~pins;
			break;
			case GPIOD:
			PORTD_DATA &= ~pins;
			break;
 2e6:	08 95       	ret
			default:
			return E_NOK;
		}
		break;
		case HIGH:
		switch (GPIO)
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	59 f0       	breq	.+22     	; 0x302 <DIO_Write+0x64>
 2ec:	28 f0       	brcs	.+10     	; 0x2f8 <DIO_Write+0x5a>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	69 f0       	breq	.+26     	; 0x30c <DIO_Write+0x6e>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	81 f0       	breq	.+32     	; 0x316 <DIO_Write+0x78>
 2f6:	18 c0       	rjmp	.+48     	; 0x328 <DIO_Write+0x8a>
		{
			case GPIOA:
			PORTA_DATA |= pins;
 2f8:	8b b3       	in	r24, 0x1b	; 27
 2fa:	68 2b       	or	r22, r24
 2fc:	6b bb       	out	0x1b, r22	; 27
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
		case HIGH:
		switch (GPIO)
		{
			case GPIOA:
			PORTA_DATA |= pins;
			break;
 300:	08 95       	ret
			case GPIOB:
			PORTB_DATA |= pins;
 302:	88 b3       	in	r24, 0x18	; 24
 304:	68 2b       	or	r22, r24
 306:	68 bb       	out	0x18, r22	; 24
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 308:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOA:
			PORTA_DATA |= pins;
			break;
			case GPIOB:
			PORTB_DATA |= pins;
			break;
 30a:	08 95       	ret
			case GPIOC:
			PORTC_DATA |= pins;
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	68 2b       	or	r22, r24
 310:	65 bb       	out	0x15, r22	; 21
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 312:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOB:
			PORTB_DATA |= pins;
			break;
			case GPIOC:
			PORTC_DATA |= pins;
			break;
 314:	08 95       	ret
			case GPIOD:
			PORTD_DATA |= pins;
 316:	82 b3       	in	r24, 0x12	; 18
 318:	68 2b       	or	r22, r24
 31a:	62 bb       	out	0x12, r22	; 18
		}
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 31c:	80 e0       	ldi	r24, 0x00	; 0
			case GPIOC:
			PORTC_DATA |= pins;
			break;
			case GPIOD:
			PORTD_DATA |= pins;
			break;
 31e:	08 95       	ret
			default:
			return E_NOK;
		}
		break;
		default:
		return E_NOK;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	08 95       	ret
			break;
			case GPIOD:
			PORTD_DATA &= ~pins;
			break;
			default:
			return E_NOK;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	08 95       	ret
			break;
			case GPIOD:
			PORTD_DATA |= pins;
			break;
			default:
			return E_NOK;
 328:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return E_NOK;
	}
	return E_OK;
}
 32a:	08 95       	ret

0000032c <DIO_Toggle>:
* 			  or even one pin.
*/
ERROR_STATUS 
DIO_Toggle (uint8 GPIO, uint8 pins)
{
	switch (GPIO)
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	59 f0       	breq	.+22     	; 0x346 <DIO_Toggle+0x1a>
 330:	28 f0       	brcs	.+10     	; 0x33c <DIO_Toggle+0x10>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	69 f0       	breq	.+26     	; 0x350 <DIO_Toggle+0x24>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	81 f0       	breq	.+32     	; 0x35a <DIO_Toggle+0x2e>
 33a:	14 c0       	rjmp	.+40     	; 0x364 <DIO_Toggle+0x38>
	{
		case GPIOA:
		PORTA_DATA ^= pins;
 33c:	8b b3       	in	r24, 0x1b	; 27
 33e:	68 27       	eor	r22, r24
 340:	6b bb       	out	0x1b, r22	; 27
		PORTD_DATA ^= pins;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 342:	80 e0       	ldi	r24, 0x00	; 0
{
	switch (GPIO)
	{
		case GPIOA:
		PORTA_DATA ^= pins;
		break;
 344:	08 95       	ret
		case GPIOB:
		PORTB_DATA ^= pins;
 346:	88 b3       	in	r24, 0x18	; 24
 348:	68 27       	eor	r22, r24
 34a:	68 bb       	out	0x18, r22	; 24
		PORTD_DATA ^= pins;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOA:
		PORTA_DATA ^= pins;
		break;
		case GPIOB:
		PORTB_DATA ^= pins;
		break;
 34e:	08 95       	ret
		case GPIOC:
		PORTC_DATA ^= pins;
 350:	85 b3       	in	r24, 0x15	; 21
 352:	68 27       	eor	r22, r24
 354:	65 bb       	out	0x15, r22	; 21
		PORTD_DATA ^= pins;
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 356:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOB:
		PORTB_DATA ^= pins;
		break;
		case GPIOC:
		PORTC_DATA ^= pins;
		break;
 358:	08 95       	ret
		case GPIOD:
		PORTD_DATA ^= pins;
 35a:	82 b3       	in	r24, 0x12	; 18
 35c:	68 27       	eor	r22, r24
 35e:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return E_NOK;
	}
	return E_OK;
 360:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOC:
		PORTC_DATA ^= pins;
		break;
		case GPIOD:
		PORTD_DATA ^= pins;
		break;
 362:	08 95       	ret
		default:
		return E_NOK;
 364:	81 e0       	ldi	r24, 0x01	; 1
	}
	return E_OK;
 366:	08 95       	ret

00000368 <Timer_Init>:
 * Description: Initiates the module.
 * 							
 */
ERROR_STATUS 
Timer_Init(Timer_cfg_s* Timer_cfg)
{
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	ec 01       	movw	r28, r24
	switch(Timer_cfg->Timer_CH_NO)
 36e:	88 81       	ld	r24, Y
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	09 f4       	brne	.+2      	; 0x376 <Timer_Init+0xe>
 374:	60 c0       	rjmp	.+192    	; 0x436 <Timer_Init+0xce>
 376:	20 f0       	brcs	.+8      	; 0x380 <Timer_Init+0x18>
 378:	82 30       	cpi	r24, 0x02	; 2
 37a:	09 f4       	brne	.+2      	; 0x37e <Timer_Init+0x16>
 37c:	b8 c0       	rjmp	.+368    	; 0x4ee <Timer_Init+0x186>
 37e:	0f c1       	rjmp	.+542    	; 0x59e <Timer_Init+0x236>
	{  
		case (TIMER_CH0) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
 380:	8c 81       	ldd	r24, Y+4	; 0x04
 382:	9d 81       	ldd	r25, Y+5	; 0x05
 384:	00 97       	sbiw	r24, 0x00	; 0
 386:	21 f0       	breq	.+8      	; 0x390 <Timer_Init+0x28>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH0] = Timer_cfg->Timer_Cbk_ptr;
 388:	90 93 67 00 	sts	0x0067, r25
 38c:	80 93 66 00 	sts	0x0066, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	b1 f1       	breq	.+108    	; 0x402 <Timer_Init+0x9a>
 396:	18 f0       	brcs	.+6      	; 0x39e <Timer_Init+0x36>
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	d1 f1       	breq	.+116    	; 0x410 <Timer_Init+0xa8>
 39c:	00 c1       	rjmp	.+512    	; 0x59e <Timer_Init+0x236>
		{
			case(TIMER_MODE):
			TCCR0 = ZERO_INITIALIZATION;
 39e:	13 be       	out	0x33, r1	; 51
			switch(Timer_cfg->Timer_Prescaler)
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	84 30       	cpi	r24, 0x04	; 4
 3a4:	c9 f0       	breq	.+50     	; 0x3d8 <Timer_Init+0x70>
 3a6:	28 f4       	brcc	.+10     	; 0x3b2 <Timer_Init+0x4a>
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	41 f0       	breq	.+16     	; 0x3bc <Timer_Init+0x54>
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	69 f0       	breq	.+26     	; 0x3ca <Timer_Init+0x62>
 3b0:	f6 c0       	rjmp	.+492    	; 0x59e <Timer_Init+0x236>
 3b2:	86 30       	cpi	r24, 0x06	; 6
 3b4:	c1 f0       	breq	.+48     	; 0x3e6 <Timer_Init+0x7e>
 3b6:	87 30       	cpi	r24, 0x07	; 7
 3b8:	e9 f0       	breq	.+58     	; 0x3f4 <Timer_Init+0x8c>
 3ba:	f1 c0       	rjmp	.+482    	; 0x59e <Timer_Init+0x236>
			{
				case(TIMER_PRESCALER_NO) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
 3bc:	a8 81       	ld	r26, Y
 3be:	b0 e0       	ldi	r27, 0x00	; 0
 3c0:	a1 59       	subi	r26, 0x91	; 145
 3c2:	bf 4f       	sbci	r27, 0xFF	; 255
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	8c 93       	st	X, r24
				break;
 3c8:	29 c0       	rjmp	.+82     	; 0x41c <Timer_Init+0xb4>
				case(TIMER_PRESCALER_8) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
 3ca:	a8 81       	ld	r26, Y
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	a1 59       	subi	r26, 0x91	; 145
 3d0:	bf 4f       	sbci	r27, 0xFF	; 255
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	8c 93       	st	X, r24
				break;
 3d6:	22 c0       	rjmp	.+68     	; 0x41c <Timer_Init+0xb4>
				case(TIMER_PRESCALER_64) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
 3d8:	a8 81       	ld	r26, Y
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	a1 59       	subi	r26, 0x91	; 145
 3de:	bf 4f       	sbci	r27, 0xFF	; 255
 3e0:	83 e0       	ldi	r24, 0x03	; 3
 3e2:	8c 93       	st	X, r24
				break;
 3e4:	1b c0       	rjmp	.+54     	; 0x41c <Timer_Init+0xb4>
				case(TIMER_PRESCALER_256) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
 3e6:	a8 81       	ld	r26, Y
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	a1 59       	subi	r26, 0x91	; 145
 3ec:	bf 4f       	sbci	r27, 0xFF	; 255
 3ee:	84 e0       	ldi	r24, 0x04	; 4
 3f0:	8c 93       	st	X, r24
				break;
 3f2:	14 c0       	rjmp	.+40     	; 0x41c <Timer_Init+0xb4>
				case(TIMER_PRESCALER_1024) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
 3f4:	a8 81       	ld	r26, Y
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	a1 59       	subi	r26, 0x91	; 145
 3fa:	bf 4f       	sbci	r27, 0xFF	; 255
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	8c 93       	st	X, r24
				break;
 400:	0d c0       	rjmp	.+26     	; 0x41c <Timer_Init+0xb4>
				default :
				return E_NOK;
			}
			break;
			case (COUNTER_RISING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
 402:	a8 81       	ld	r26, Y
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	a1 59       	subi	r26, 0x91	; 145
 408:	bf 4f       	sbci	r27, 0xFF	; 255
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	8c 93       	st	X, r24
			break;
 40e:	06 c0       	rjmp	.+12     	; 0x41c <Timer_Init+0xb4>
			
			case (COUNTER_FALLING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
 410:	a8 81       	ld	r26, Y
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	a1 59       	subi	r26, 0x91	; 145
 416:	bf 4f       	sbci	r27, 0xFF	; 255
 418:	86 e0       	ldi	r24, 0x06	; 6
 41a:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 41c:	8a 81       	ldd	r24, Y+2	; 0x02
 41e:	88 23       	and	r24, r24
 420:	39 f0       	breq	.+14     	; 0x430 <Timer_Init+0xc8>
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	09 f0       	breq	.+2      	; 0x428 <Timer_Init+0xc0>
 426:	bb c0       	rjmp	.+374    	; 0x59e <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE):
			TIMSK |= SHIFT_ONE;
 428:	89 b7       	in	r24, 0x39	; 57
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	89 bf       	out	0x39, r24	; 57
			break;
 42e:	b7 c0       	rjmp	.+366    	; 0x59e <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= ZERO_INITIALIZATION;
 430:	89 b7       	in	r24, 0x39	; 57
 432:	89 bf       	out	0x39, r24	; 57
			break;
 434:	b4 c0       	rjmp	.+360    	; 0x59e <Timer_Init+0x236>
			default :
			return E_NOK;
		}
		break;
		case (TIMER_CH1) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
 436:	8c 81       	ldd	r24, Y+4	; 0x04
 438:	9d 81       	ldd	r25, Y+5	; 0x05
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	21 f0       	breq	.+8      	; 0x446 <Timer_Init+0xde>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH1] = Timer_cfg->Timer_Cbk_ptr;
 43e:	90 93 69 00 	sts	0x0069, r25
 442:	80 93 68 00 	sts	0x0068, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	b9 f1       	breq	.+110    	; 0x4ba <Timer_Init+0x152>
 44c:	18 f0       	brcs	.+6      	; 0x454 <Timer_Init+0xec>
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	d9 f1       	breq	.+118    	; 0x4c8 <Timer_Init+0x160>
 452:	a5 c0       	rjmp	.+330    	; 0x59e <Timer_Init+0x236>
		{
			case(TIMER_MODE):
			TCCR1 = ZERO_INITIALIZATION;
 454:	1f bc       	out	0x2f, r1	; 47
 456:	1e bc       	out	0x2e, r1	; 46
			switch(Timer_cfg->Timer_Prescaler)
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	c9 f0       	breq	.+50     	; 0x490 <Timer_Init+0x128>
 45e:	28 f4       	brcc	.+10     	; 0x46a <Timer_Init+0x102>
 460:	81 30       	cpi	r24, 0x01	; 1
 462:	41 f0       	breq	.+16     	; 0x474 <Timer_Init+0x10c>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	69 f0       	breq	.+26     	; 0x482 <Timer_Init+0x11a>
 468:	9a c0       	rjmp	.+308    	; 0x59e <Timer_Init+0x236>
 46a:	86 30       	cpi	r24, 0x06	; 6
 46c:	c1 f0       	breq	.+48     	; 0x49e <Timer_Init+0x136>
 46e:	87 30       	cpi	r24, 0x07	; 7
 470:	e9 f0       	breq	.+58     	; 0x4ac <Timer_Init+0x144>
 472:	95 c0       	rjmp	.+298    	; 0x59e <Timer_Init+0x236>
			{
				case(TIMER_PRESCALER_NO) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
 474:	a8 81       	ld	r26, Y
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	a1 59       	subi	r26, 0x91	; 145
 47a:	bf 4f       	sbci	r27, 0xFF	; 255
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	8c 93       	st	X, r24
				break;
 480:	29 c0       	rjmp	.+82     	; 0x4d4 <Timer_Init+0x16c>
				case(TIMER_PRESCALER_8) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
 482:	a8 81       	ld	r26, Y
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	a1 59       	subi	r26, 0x91	; 145
 488:	bf 4f       	sbci	r27, 0xFF	; 255
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	8c 93       	st	X, r24
				break;
 48e:	22 c0       	rjmp	.+68     	; 0x4d4 <Timer_Init+0x16c>
				case(TIMER_PRESCALER_64) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
 490:	a8 81       	ld	r26, Y
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	a1 59       	subi	r26, 0x91	; 145
 496:	bf 4f       	sbci	r27, 0xFF	; 255
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	8c 93       	st	X, r24
				break;
 49c:	1b c0       	rjmp	.+54     	; 0x4d4 <Timer_Init+0x16c>
				case(TIMER_PRESCALER_256) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
 49e:	a8 81       	ld	r26, Y
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	a1 59       	subi	r26, 0x91	; 145
 4a4:	bf 4f       	sbci	r27, 0xFF	; 255
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	8c 93       	st	X, r24
				break;
 4aa:	14 c0       	rjmp	.+40     	; 0x4d4 <Timer_Init+0x16c>
				case(TIMER_PRESCALER_1024) :
				gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
 4ac:	a8 81       	ld	r26, Y
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	a1 59       	subi	r26, 0x91	; 145
 4b2:	bf 4f       	sbci	r27, 0xFF	; 255
 4b4:	85 e0       	ldi	r24, 0x05	; 5
 4b6:	8c 93       	st	X, r24
				break;
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <Timer_Init+0x16c>
				return E_NOK;
			}
			break;
			
			case (COUNTER_RISING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
 4ba:	a8 81       	ld	r26, Y
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	a1 59       	subi	r26, 0x91	; 145
 4c0:	bf 4f       	sbci	r27, 0xFF	; 255
 4c2:	87 e0       	ldi	r24, 0x07	; 7
 4c4:	8c 93       	st	X, r24
			break;
 4c6:	06 c0       	rjmp	.+12     	; 0x4d4 <Timer_Init+0x16c>
			
			case (COUNTER_FALLING_MODE):
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
 4c8:	a8 81       	ld	r26, Y
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	a1 59       	subi	r26, 0x91	; 145
 4ce:	bf 4f       	sbci	r27, 0xFF	; 255
 4d0:	86 e0       	ldi	r24, 0x06	; 6
 4d2:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	88 23       	and	r24, r24
 4d8:	39 f0       	breq	.+14     	; 0x4e8 <Timer_Init+0x180>
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	09 f0       	breq	.+2      	; 0x4e0 <Timer_Init+0x178>
 4de:	5f c0       	rjmp	.+190    	; 0x59e <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE ) :
			TIMSK |= SHIFT_FOUR;
 4e0:	89 b7       	in	r24, 0x39	; 57
 4e2:	84 60       	ori	r24, 0x04	; 4
 4e4:	89 bf       	out	0x39, r24	; 57
			break;
 4e6:	5b c0       	rjmp	.+182    	; 0x59e <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= ZERO_INITIALIZATION;
 4e8:	89 b7       	in	r24, 0x39	; 57
 4ea:	89 bf       	out	0x39, r24	; 57
			break;
 4ec:	58 c0       	rjmp	.+176    	; 0x59e <Timer_Init+0x236>
			default :
			return E_NOK;
		}
		break;
		case (TIMER_CH2) :
		if (NULL != Timer_cfg->Timer_Cbk_ptr)
 4ee:	8c 81       	ldd	r24, Y+4	; 0x04
 4f0:	9d 81       	ldd	r25, Y+5	; 0x05
 4f2:	00 97       	sbiw	r24, 0x00	; 0
 4f4:	21 f0       	breq	.+8      	; 0x4fe <Timer_Init+0x196>
		{
			TIMER_OVF_CBK_PTR[TIMER_CH2] = Timer_cfg->Timer_Cbk_ptr;
 4f6:	90 93 6b 00 	sts	0x006B, r25
 4fa:	80 93 6a 00 	sts	0x006A, r24
		}
		else
		{
			
		}
		switch(Timer_cfg->Timer_Mode)
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	88 23       	and	r24, r24
 502:	21 f0       	breq	.+8      	; 0x50c <Timer_Init+0x1a4>
 504:	83 30       	cpi	r24, 0x03	; 3
 506:	08 f0       	brcs	.+2      	; 0x50a <Timer_Init+0x1a2>
 508:	4a c0       	rjmp	.+148    	; 0x59e <Timer_Init+0x236>
 50a:	3e c0       	rjmp	.+124    	; 0x588 <Timer_Init+0x220>
		{
			case(TIMER_MODE):
			TCCR2 = ZERO_INITIALIZATION;
 50c:	15 bc       	out	0x25, r1	; 37
		switch(Timer_cfg->Timer_Prescaler)
 50e:	4b 81       	ldd	r20, Y+3	; 0x03
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	41 50       	subi	r20, 0x01	; 1
 514:	51 09       	sbc	r21, r1
 516:	47 30       	cpi	r20, 0x07	; 7
 518:	51 05       	cpc	r21, r1
 51a:	08 f0       	brcs	.+2      	; 0x51e <Timer_Init+0x1b6>
 51c:	40 c0       	rjmp	.+128    	; 0x59e <Timer_Init+0x236>
 51e:	46 5d       	subi	r20, 0xD6	; 214
 520:	5f 4f       	sbci	r21, 0xFF	; 255
 522:	fa 01       	movw	r30, r20
 524:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__tablejump2__>
		{
			case(TIMER_PRESCALER_NO) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_ONE;
 528:	a8 81       	ld	r26, Y
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	a1 59       	subi	r26, 0x91	; 145
 52e:	bf 4f       	sbci	r27, 0xFF	; 255
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	8c 93       	st	X, r24
			break;
 534:	29 c0       	rjmp	.+82     	; 0x588 <Timer_Init+0x220>
			case(TIMER_PRESCALER_8) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_TWO;
 536:	a8 81       	ld	r26, Y
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	a1 59       	subi	r26, 0x91	; 145
 53c:	bf 4f       	sbci	r27, 0xFF	; 255
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	8c 93       	st	X, r24
			break;
 542:	22 c0       	rjmp	.+68     	; 0x588 <Timer_Init+0x220>
			case(TIMER_PRESCALER_32) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_THREE;
 544:	a8 81       	ld	r26, Y
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	a1 59       	subi	r26, 0x91	; 145
 54a:	bf 4f       	sbci	r27, 0xFF	; 255
 54c:	83 e0       	ldi	r24, 0x03	; 3
 54e:	8c 93       	st	X, r24
			break;
 550:	1b c0       	rjmp	.+54     	; 0x588 <Timer_Init+0x220>
			case(TIMER_PRESCALER_64) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FOUR;
 552:	a8 81       	ld	r26, Y
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	a1 59       	subi	r26, 0x91	; 145
 558:	bf 4f       	sbci	r27, 0xFF	; 255
 55a:	84 e0       	ldi	r24, 0x04	; 4
 55c:	8c 93       	st	X, r24
			break;
 55e:	14 c0       	rjmp	.+40     	; 0x588 <Timer_Init+0x220>
			case(TIMER_PRESCALER_128) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_FIVE;
 560:	a8 81       	ld	r26, Y
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	a1 59       	subi	r26, 0x91	; 145
 566:	bf 4f       	sbci	r27, 0xFF	; 255
 568:	85 e0       	ldi	r24, 0x05	; 5
 56a:	8c 93       	st	X, r24
			break;
 56c:	0d c0       	rjmp	.+26     	; 0x588 <Timer_Init+0x220>
			case(TIMER_PRESCALER_256) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SIX;
 56e:	a8 81       	ld	r26, Y
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	a1 59       	subi	r26, 0x91	; 145
 574:	bf 4f       	sbci	r27, 0xFF	; 255
 576:	86 e0       	ldi	r24, 0x06	; 6
 578:	8c 93       	st	X, r24
			break;
 57a:	06 c0       	rjmp	.+12     	; 0x588 <Timer_Init+0x220>
			case(TIMER_PRESCALER_1024) :
			gu8_TimerPrescaler[Timer_cfg->Timer_CH_NO] = SHIFT_SEVEN;
 57c:	a8 81       	ld	r26, Y
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	a1 59       	subi	r26, 0x91	; 145
 582:	bf 4f       	sbci	r27, 0xFF	; 255
 584:	87 e0       	ldi	r24, 0x07	; 7
 586:	8c 93       	st	X, r24
			break;
			
			default :
			return E_NOK;
		}
		switch(Timer_cfg->Timer_Polling_Or_Interrupt)
 588:	8a 81       	ldd	r24, Y+2	; 0x02
 58a:	88 23       	and	r24, r24
 58c:	31 f0       	breq	.+12     	; 0x59a <Timer_Init+0x232>
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	31 f4       	brne	.+12     	; 0x59e <Timer_Init+0x236>
		{
			case(TIMER_INTERRUPT_MODE ) :
			TIMSK |= SHIFT_TIMER_INTERRUPT_MODE;
 592:	89 b7       	in	r24, 0x39	; 57
 594:	80 64       	ori	r24, 0x40	; 64
 596:	89 bf       	out	0x39, r24	; 57
			break;
 598:	02 c0       	rjmp	.+4      	; 0x59e <Timer_Init+0x236>
			case(TIMER_POLLING_MODE):
			TIMSK |= SHIFT_ZERO;
 59a:	89 b7       	in	r24, 0x39	; 57
 59c:	89 bf       	out	0x39, r24	; 57
		default :
		return E_NOK;
		
	}
	return E_NOK;
}
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <Timer_Start>:
 * 							
 */
ERROR_STATUS 
Timer_Start(uint8 Timer_CH_NO, uint16 Timer_Count)
{
	switch (Timer_CH_NO)
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	01 f1       	breq	.+64     	; 0x5ea <Timer_Start+0x44>
 5aa:	18 f0       	brcs	.+6      	; 0x5b2 <Timer_Start+0xc>
 5ac:	82 30       	cpi	r24, 0x02	; 2
 5ae:	d1 f1       	breq	.+116    	; 0x624 <Timer_Start+0x7e>
 5b0:	4e c0       	rjmp	.+156    	; 0x64e <Timer_Start+0xa8>
	{
		case TIMER_CH0:
		if (Timer_Count > TCNT0_MAX)
 5b2:	6f 3f       	cpi	r22, 0xFF	; 255
 5b4:	71 05       	cpc	r23, r1
 5b6:	11 f0       	breq	.+4      	; 0x5bc <Timer_Start+0x16>
 5b8:	08 f0       	brcs	.+2      	; 0x5bc <Timer_Start+0x16>
 5ba:	4b c0       	rjmp	.+150    	; 0x652 <Timer_Start+0xac>
		{
			return E_NOK;
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
 5bc:	90 91 6f 00 	lds	r25, 0x006F
 5c0:	99 23       	and	r25, r25
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <Timer_Start+0x20>
 5c4:	48 c0       	rjmp	.+144    	; 0x656 <Timer_Start+0xb0>
		{
			return E_NOK;
		}
		else if ((gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SEVEN)||(gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SIX))
 5c6:	96 50       	subi	r25, 0x06	; 6
 5c8:	92 30       	cpi	r25, 0x02	; 2
 5ca:	38 f4       	brcc	.+14     	; 0x5da <Timer_Start+0x34>
		{
			TCNT0 = ZERO_INITIALIZATION;
 5cc:	12 be       	out	0x32, r1	; 50
			TCCR0 |= gu8_TimerPrescaler[Timer_CH_NO];
 5ce:	23 b7       	in	r18, 0x33	; 51
 5d0:	90 91 6f 00 	lds	r25, 0x006F
 5d4:	92 2b       	or	r25, r18
 5d6:	93 bf       	out	0x33, r25	; 51
 5d8:	32 c0       	rjmp	.+100    	; 0x63e <Timer_Start+0x98>
		}
		else 
		{
			TCNT0 = TCNT0_MAX - Timer_Count;
 5da:	60 95       	com	r22
 5dc:	62 bf       	out	0x32, r22	; 50
			TCCR0 |= gu8_TimerPrescaler[Timer_CH_NO];
 5de:	23 b7       	in	r18, 0x33	; 51
 5e0:	90 91 6f 00 	lds	r25, 0x006F
 5e4:	92 2b       	or	r25, r18
 5e6:	93 bf       	out	0x33, r25	; 51
 5e8:	2a c0       	rjmp	.+84     	; 0x63e <Timer_Start+0x98>
		}
		break;
		
		case TIMER_CH1:
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
 5ea:	90 91 70 00 	lds	r25, 0x0070
 5ee:	99 23       	and	r25, r25
 5f0:	a1 f1       	breq	.+104    	; 0x65a <Timer_Start+0xb4>
		{
			return E_NOK;
		}
		else if ((gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SEVEN)||(gu8_TimerPrescaler[Timer_CH_NO] == SHIFT_SIX))
 5f2:	96 50       	subi	r25, 0x06	; 6
 5f4:	92 30       	cpi	r25, 0x02	; 2
 5f6:	50 f4       	brcc	.+20     	; 0x60c <Timer_Start+0x66>
		{
			TCNT1 = ZERO_INITIALIZATION;
 5f8:	1d bc       	out	0x2d, r1	; 45
 5fa:	1c bc       	out	0x2c, r1	; 44
			TCCR1 |= gu8_TimerPrescaler[Timer_CH_NO];
 5fc:	2e b5       	in	r18, 0x2e	; 46
 5fe:	3f b5       	in	r19, 0x2f	; 47
 600:	90 91 70 00 	lds	r25, 0x0070
 604:	29 2b       	or	r18, r25
 606:	3f bd       	out	0x2f, r19	; 47
 608:	2e bd       	out	0x2e, r18	; 46
 60a:	19 c0       	rjmp	.+50     	; 0x63e <Timer_Start+0x98>
		}
		else 
		{
			TCNT1 = TCNT1_MAX - Timer_Count;
 60c:	60 95       	com	r22
 60e:	70 95       	com	r23
 610:	7d bd       	out	0x2d, r23	; 45
 612:	6c bd       	out	0x2c, r22	; 44
			TCCR1 |= gu8_TimerPrescaler[Timer_CH_NO];
 614:	2e b5       	in	r18, 0x2e	; 46
 616:	3f b5       	in	r19, 0x2f	; 47
 618:	90 91 70 00 	lds	r25, 0x0070
 61c:	29 2b       	or	r18, r25
 61e:	3f bd       	out	0x2f, r19	; 47
 620:	2e bd       	out	0x2e, r18	; 46
 622:	0d c0       	rjmp	.+26     	; 0x63e <Timer_Start+0x98>
		}
		break;
		
		case TIMER_CH2:
		if (Timer_Count > TCNT2_MAX)
 624:	6f 3f       	cpi	r22, 0xFF	; 255
 626:	71 05       	cpc	r23, r1
 628:	09 f0       	breq	.+2      	; 0x62c <Timer_Start+0x86>
 62a:	c8 f4       	brcc	.+50     	; 0x65e <Timer_Start+0xb8>
		{
			return E_NOK;
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
 62c:	90 91 71 00 	lds	r25, 0x0071
 630:	99 23       	and	r25, r25
 632:	b9 f0       	breq	.+46     	; 0x662 <Timer_Start+0xbc>
		{
			return E_NOK;
		}
		else 
		{
			TCNT2 = TCNT2_MAX - Timer_Count;
 634:	60 95       	com	r22
 636:	64 bd       	out	0x24, r22	; 36
			TCCR2 |= gu8_TimerPrescaler[Timer_CH_NO];
 638:	25 b5       	in	r18, 0x25	; 37
 63a:	92 2b       	or	r25, r18
 63c:	95 bd       	out	0x25, r25	; 37
		}
		break;
		default:
		return E_NOK;
	}
	gu8_started_state[Timer_CH_NO] = ONE_INITIALIZATION;
 63e:	e8 2f       	mov	r30, r24
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	e4 59       	subi	r30, 0x94	; 148
 644:	ff 4f       	sbci	r31, 0xFF	; 255
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	80 83       	st	Z, r24
	return E_OK;
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
			TCNT2 = TCNT2_MAX - Timer_Count;
			TCCR2 |= gu8_TimerPrescaler[Timer_CH_NO];
		}
		break;
		default:
		return E_NOK;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	08 95       	ret
	switch (Timer_CH_NO)
	{
		case TIMER_CH0:
		if (Timer_Count > TCNT0_MAX)
		{
			return E_NOK;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	08 95       	ret
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
		break;
		
		case TIMER_CH1:
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	08 95       	ret
		break;
		
		case TIMER_CH2:
		if (Timer_Count > TCNT2_MAX)
		{
			return E_NOK;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
		}
		if (gu8_TimerPrescaler[Timer_CH_NO] == TIMER_NO_CLOCK)
		{
			return E_NOK;
 662:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return E_NOK;
	}
	gu8_started_state[Timer_CH_NO] = ONE_INITIALIZATION;
	return E_OK;
}
 664:	08 95       	ret

00000666 <__vector_11>:
}



ISR(TIMER0_OVF_vect)
{
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	6f 93       	push	r22
 67a:	7f 93       	push	r23
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
 680:	af 93       	push	r26
 682:	bf 93       	push	r27
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH0])
 688:	e0 91 66 00 	lds	r30, 0x0066
 68c:	f0 91 67 00 	lds	r31, 0x0067
 690:	30 97       	sbiw	r30, 0x00	; 0
 692:	09 f0       	breq	.+2      	; 0x696 <__vector_11+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH0]();
 694:	09 95       	icall
	} 
	else
	{
		
	}
}
 696:	ff 91       	pop	r31
 698:	ef 91       	pop	r30
 69a:	bf 91       	pop	r27
 69c:	af 91       	pop	r26
 69e:	9f 91       	pop	r25
 6a0:	8f 91       	pop	r24
 6a2:	7f 91       	pop	r23
 6a4:	6f 91       	pop	r22
 6a6:	5f 91       	pop	r21
 6a8:	4f 91       	pop	r20
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	2f 93       	push	r18
 6c4:	3f 93       	push	r19
 6c6:	4f 93       	push	r20
 6c8:	5f 93       	push	r21
 6ca:	6f 93       	push	r22
 6cc:	7f 93       	push	r23
 6ce:	8f 93       	push	r24
 6d0:	9f 93       	push	r25
 6d2:	af 93       	push	r26
 6d4:	bf 93       	push	r27
 6d6:	ef 93       	push	r30
 6d8:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH1])
 6da:	e0 91 68 00 	lds	r30, 0x0068
 6de:	f0 91 69 00 	lds	r31, 0x0069
 6e2:	30 97       	sbiw	r30, 0x00	; 0
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <__vector_9+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH1]();
 6e6:	09 95       	icall
	}
	else
	{
		
	}
}
 6e8:	ff 91       	pop	r31
 6ea:	ef 91       	pop	r30
 6ec:	bf 91       	pop	r27
 6ee:	af 91       	pop	r26
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	7f 91       	pop	r23
 6f6:	6f 91       	pop	r22
 6f8:	5f 91       	pop	r21
 6fa:	4f 91       	pop	r20
 6fc:	3f 91       	pop	r19
 6fe:	2f 91       	pop	r18
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <__vector_5>:

ISR(TIMER2_OVF_vect)
{
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	ef 93       	push	r30
 72a:	ff 93       	push	r31
	if (NULL != TIMER_OVF_CBK_PTR[TIMER_CH2])
 72c:	e0 91 6a 00 	lds	r30, 0x006A
 730:	f0 91 6b 00 	lds	r31, 0x006B
 734:	30 97       	sbiw	r30, 0x00	; 0
 736:	09 f0       	breq	.+2      	; 0x73a <__vector_5+0x30>
	{
		TIMER_OVF_CBK_PTR[TIMER_CH2]();
 738:	09 95       	icall
	}
	else
	{
		
	}
}
 73a:	ff 91       	pop	r31
 73c:	ef 91       	pop	r30
 73e:	bf 91       	pop	r27
 740:	af 91       	pop	r26
 742:	9f 91       	pop	r25
 744:	8f 91       	pop	r24
 746:	7f 91       	pop	r23
 748:	6f 91       	pop	r22
 74a:	5f 91       	pop	r21
 74c:	4f 91       	pop	r20
 74e:	3f 91       	pop	r19
 750:	2f 91       	pop	r18
 752:	0f 90       	pop	r0
 754:	0f be       	out	0x3f, r0	; 63
 756:	0f 90       	pop	r0
 758:	1f 90       	pop	r1
 75a:	18 95       	reti

0000075c <SOS_PrioritySort>:
	Timer_Start(gu8_SOS_TIMER_CH, gu16_SOS_TimerCount);
	gu8_SOS_DispatcherFlag = 1;	
}

static void SOS_PrioritySort(void)
{
 75c:	df 92       	push	r13
 75e:	ef 92       	push	r14
 760:	ff 92       	push	r15
 762:	0f 93       	push	r16
 764:	1f 93       	push	r17
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	cd b7       	in	r28, 0x3d	; 61
 76c:	de b7       	in	r29, 0x3e	; 62
 76e:	28 97       	sbiw	r28, 0x08	; 8
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	de bf       	out	0x3e, r29	; 62
 776:	0f be       	out	0x3f, r0	; 63
 778:	cd bf       	out	0x3d, r28	; 61
   uint8 i, j;
   for (i = 0; i < gu8_bufferCounter - 1; i++)
 77a:	40 91 73 00 	lds	r20, 0x0073
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	ca 01       	movw	r24, r20
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	18 16       	cp	r1, r24
 786:	19 06       	cpc	r1, r25
 788:	0c f0       	brlt	.+2      	; 0x78c <SOS_PrioritySort+0x30>
 78a:	67 c0       	rjmp	.+206    	; 0x85a <SOS_PrioritySort+0xfe>
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	10 e0       	ldi	r17, 0x00	; 0
   {
	   for (j = 0; j < gu8_bufferCounter - i - 1; j++)
 792:	e1 2c       	mov	r14, r1
 794:	f1 2c       	mov	r15, r1
 796:	00 e0       	ldi	r16, 0x00	; 0
	   {
		   if (gastr_SOS_Buffer[j].u8_priority > gastr_SOS_Buffer[j+1].u8_priority)
		   {
				str_SOS_Task_t str_SOS_TempTask = gastr_SOS_Buffer[j];
 798:	78 e0       	ldi	r23, 0x08	; 8
 79a:	54 c0       	rjmp	.+168    	; 0x844 <SOS_PrioritySort+0xe8>
   uint8 i, j;
   for (i = 0; i < gu8_bufferCounter - 1; i++)
   {
	   for (j = 0; j < gu8_bufferCounter - i - 1; j++)
	   {
		   if (gastr_SOS_Buffer[j].u8_priority > gastr_SOS_Buffer[j+1].u8_priority)
 79c:	9c 01       	movw	r18, r24
 79e:	2f 5f       	subi	r18, 0xFF	; 255
 7a0:	3f 4f       	sbci	r19, 0xFF	; 255
 7a2:	dc 01       	movw	r26, r24
 7a4:	aa 0f       	add	r26, r26
 7a6:	bb 1f       	adc	r27, r27
 7a8:	aa 0f       	add	r26, r26
 7aa:	bb 1f       	adc	r27, r27
 7ac:	aa 0f       	add	r26, r26
 7ae:	bb 1f       	adc	r27, r27
 7b0:	ac 58       	subi	r26, 0x8C	; 140
 7b2:	bf 4f       	sbci	r27, 0xFF	; 255
 7b4:	f9 01       	movw	r30, r18
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	ec 58       	subi	r30, 0x8C	; 140
 7c4:	ff 4f       	sbci	r31, 0xFF	; 255
 7c6:	16 96       	adiw	r26, 0x06	; 6
 7c8:	ac 91       	ld	r26, X
 7ca:	e6 81       	ldd	r30, Z+6	; 0x06
 7cc:	ea 17       	cp	r30, r26
 7ce:	38 f5       	brcc	.+78     	; 0x81e <SOS_PrioritySort+0xc2>
		   {
				str_SOS_Task_t str_SOS_TempTask = gastr_SOS_Buffer[j];
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	8c 58       	subi	r24, 0x8C	; 140
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	fc 01       	movw	r30, r24
 7e2:	de 01       	movw	r26, r28
 7e4:	11 96       	adiw	r26, 0x01	; 1
 7e6:	d7 2e       	mov	r13, r23
 7e8:	01 90       	ld	r0, Z+
 7ea:	0d 92       	st	X+, r0
 7ec:	da 94       	dec	r13
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <SOS_PrioritySort+0x8c>
				gastr_SOS_Buffer[j] = gastr_SOS_Buffer[j+1];
 7f0:	22 0f       	add	r18, r18
 7f2:	33 1f       	adc	r19, r19
 7f4:	22 0f       	add	r18, r18
 7f6:	33 1f       	adc	r19, r19
 7f8:	22 0f       	add	r18, r18
 7fa:	33 1f       	adc	r19, r19
 7fc:	2c 58       	subi	r18, 0x8C	; 140
 7fe:	3f 4f       	sbci	r19, 0xFF	; 255
 800:	f9 01       	movw	r30, r18
 802:	dc 01       	movw	r26, r24
 804:	87 2f       	mov	r24, r23
 806:	01 90       	ld	r0, Z+
 808:	0d 92       	st	X+, r0
 80a:	8a 95       	dec	r24
 80c:	e1 f7       	brne	.-8      	; 0x806 <SOS_PrioritySort+0xaa>
				gastr_SOS_Buffer[j+1] = str_SOS_TempTask;
 80e:	fe 01       	movw	r30, r28
 810:	31 96       	adiw	r30, 0x01	; 1
 812:	d9 01       	movw	r26, r18
 814:	87 2f       	mov	r24, r23
 816:	01 90       	ld	r0, Z+
 818:	0d 92       	st	X+, r0
 81a:	8a 95       	dec	r24
 81c:	e1 f7       	brne	.-8      	; 0x816 <SOS_PrioritySort+0xba>
static void SOS_PrioritySort(void)
{
   uint8 i, j;
   for (i = 0; i < gu8_bufferCounter - 1; i++)
   {
	   for (j = 0; j < gu8_bufferCounter - i - 1; j++)
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	86 2f       	mov	r24, r22
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	84 17       	cp	r24, r20
 826:	95 07       	cpc	r25, r21
 828:	0c f4       	brge	.+2      	; 0x82c <SOS_PrioritySort+0xd0>
 82a:	b8 cf       	rjmp	.-144    	; 0x79c <SOS_PrioritySort+0x40>
}

static void SOS_PrioritySort(void)
{
   uint8 i, j;
   for (i = 0; i < gu8_bufferCounter - 1; i++)
 82c:	1f 5f       	subi	r17, 0xFF	; 255
 82e:	81 2f       	mov	r24, r17
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	40 91 73 00 	lds	r20, 0x0073
 836:	50 e0       	ldi	r21, 0x00	; 0
 838:	9a 01       	movw	r18, r20
 83a:	21 50       	subi	r18, 0x01	; 1
 83c:	31 09       	sbc	r19, r1
 83e:	82 17       	cp	r24, r18
 840:	93 07       	cpc	r25, r19
 842:	5c f4       	brge	.+22     	; 0x85a <SOS_PrioritySort+0xfe>
   {
	   for (j = 0; j < gu8_bufferCounter - i - 1; j++)
 844:	48 1b       	sub	r20, r24
 846:	59 0b       	sbc	r21, r25
 848:	41 50       	subi	r20, 0x01	; 1
 84a:	51 09       	sbc	r21, r1
 84c:	14 16       	cp	r1, r20
 84e:	15 06       	cpc	r1, r21
 850:	6c f7       	brge	.-38     	; 0x82c <SOS_PrioritySort+0xd0>
 852:	8e 2d       	mov	r24, r14
 854:	9f 2d       	mov	r25, r15
 856:	60 2f       	mov	r22, r16
 858:	a1 cf       	rjmp	.-190    	; 0x79c <SOS_PrioritySort+0x40>
	   }
	   
   }

	
}
 85a:	28 96       	adiw	r28, 0x08	; 8
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	08 95       	ret

00000876 <SOS_TimerCbk>:


void SOS_TimerCbk(void)
{
	/* resetting the timer */
	Timer_Start(gu8_SOS_TIMER_CH, gu16_SOS_TimerCount);
 876:	60 91 c5 00 	lds	r22, 0x00C5
 87a:	70 91 c6 00 	lds	r23, 0x00C6
 87e:	80 91 c7 00 	lds	r24, 0x00C7
 882:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Timer_Start>
	gu8_SOS_DispatcherFlag = 1;	
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	80 93 c4 00 	sts	0x00C4, r24
 88c:	08 95       	ret

0000088e <SOS_Init>:
 * Description: This function initializes the SOS module.
 * 							
 */
ERROR_STATUS 
SOS_Init(void)
{
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	00 d0       	rcall	.+0      	; 0x896 <SOS_Init+0x8>
 896:	00 d0       	rcall	.+0      	; 0x898 <SOS_Init+0xa>
 898:	00 d0       	rcall	.+0      	; 0x89a <SOS_Init+0xc>
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
	uint8 u8_retval = SOS_BASE_ERR + SUCCESS;
	if (gu8_SOS_Status == SOS_UNINIT)
 89e:	80 91 60 00 	lds	r24, 0x0060
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	e1 f5       	brne	.+120    	; 0x91e <SOS_Init+0x90>
	{
		/* TIMER INIT*/
		Timer_cfg_s Timer_info;
		switch(SOS_Info.u8_SOS_TimerID)
 8a6:	80 91 61 00 	lds	r24, 0x0061
 8aa:	81 30       	cpi	r24, 0x01	; 1
 8ac:	41 f0       	breq	.+16     	; 0x8be <SOS_Init+0x30>
 8ae:	18 f0       	brcs	.+6      	; 0x8b6 <SOS_Init+0x28>
 8b0:	82 30       	cpi	r24, 0x02	; 2
 8b2:	51 f0       	breq	.+20     	; 0x8c8 <SOS_Init+0x3a>
 8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <SOS_Init+0x42>
		{
			case SOS_CH0:
				Timer_info.Timer_CH_NO = TIMER_CH0;
 8b6:	19 82       	std	Y+1, r1	; 0x01
				gu8_SOS_TIMER_CH = TIMER_CH0;
 8b8:	10 92 c7 00 	sts	0x00C7, r1
				break;
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <SOS_Init+0x42>
			case SOS_CH1:
				Timer_info.Timer_CH_NO = TIMER_CH1;
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	89 83       	std	Y+1, r24	; 0x01
				gu8_SOS_TIMER_CH = TIMER_CH1;
 8c2:	80 93 c7 00 	sts	0x00C7, r24
				break;
 8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <SOS_Init+0x42>
			case SOS_CH2:
				Timer_info.Timer_CH_NO = TIMER_CH2;
 8c8:	82 e0       	ldi	r24, 0x02	; 2
 8ca:	89 83       	std	Y+1, r24	; 0x01
				gu8_SOS_TIMER_CH = TIMER_CH2;
 8cc:	80 93 c7 00 	sts	0x00C7, r24
				break;
		}
		Timer_info.Timer_Mode = TIMER_MODE;
 8d0:	1a 82       	std	Y+2, r1	; 0x02
		Timer_info.Timer_Polling_Or_Interrupt = TIMER_INTERRUPT_MODE;
 8d2:	11 e0       	ldi	r17, 0x01	; 1
 8d4:	1b 83       	std	Y+3, r17	; 0x03
		Timer_info.Timer_Prescaler = TIMER_PRESCALER_1024;
 8d6:	87 e0       	ldi	r24, 0x07	; 7
 8d8:	8c 83       	std	Y+4, r24	; 0x04
		Timer_info.Timer_Cbk_ptr = SOS_TimerCbk;
 8da:	8b e3       	ldi	r24, 0x3B	; 59
 8dc:	94 e0       	ldi	r25, 0x04	; 4
 8de:	9e 83       	std	Y+6, r25	; 0x06
 8e0:	8d 83       	std	Y+5, r24	; 0x05
		Timer_Init(&Timer_info);
 8e2:	ce 01       	movw	r24, r28
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	0e 94 b4 01 	call	0x368	; 0x368 <Timer_Init>
		/* module variables init*/
		gu16_SOS_TimerCount = (SOS_Info.u8_SOS_SystemTick * 16000U) / 1024U;
 8ea:	40 91 62 00 	lds	r20, 0x0062
 8ee:	20 e8       	ldi	r18, 0x80	; 128
 8f0:	3e e3       	ldi	r19, 0x3E	; 62
 8f2:	42 9f       	mul	r20, r18
 8f4:	c0 01       	movw	r24, r0
 8f6:	43 9f       	mul	r20, r19
 8f8:	90 0d       	add	r25, r0
 8fa:	11 24       	eor	r1, r1
 8fc:	89 2f       	mov	r24, r25
 8fe:	86 95       	lsr	r24
 900:	86 95       	lsr	r24
 902:	80 93 c5 00 	sts	0x00C5, r24
 906:	10 92 c6 00 	sts	0x00C6, r1
		gu8_SOS_DispatcherFlag = 0;
 90a:	10 92 c4 00 	sts	0x00C4, r1
		gu8_bufferCounter = 0;
 90e:	10 92 73 00 	sts	0x0073, r1
		gu8_timerStarted = SOS_NOT_STARTED;
 912:	10 93 72 00 	sts	0x0072, r17
		gu8_SOS_Status = SOS_INIT;
 916:	10 92 60 00 	sts	0x0060, r1
 * 							
 */
ERROR_STATUS 
SOS_Init(void)
{
	uint8 u8_retval = SOS_BASE_ERR + SUCCESS;
 91a:	8c e8       	ldi	r24, 0x8C	; 140
 91c:	01 c0       	rjmp	.+2      	; 0x920 <SOS_Init+0x92>
		gu8_timerStarted = SOS_NOT_STARTED;
		gu8_SOS_Status = SOS_INIT;
	}
	else
	{
		u8_retval = SOS_BASE_ERR + ALREADY_INITIALIZED_ERR;
 91e:	8f e8       	ldi	r24, 0x8F	; 143
	}
	return u8_retval;
}
 920:	26 96       	adiw	r28, 0x06	; 6
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	f8 94       	cli
 926:	de bf       	out	0x3e, r29	; 62
 928:	0f be       	out	0x3f, r0	; 63
 92a:	cd bf       	out	0x3d, r28	; 61
 92c:	df 91       	pop	r29
 92e:	cf 91       	pop	r28
 930:	1f 91       	pop	r17
 932:	08 95       	ret

00000934 <SOS_CreateTask>:
 */
ERROR_STATUS 
SOS_CreateTask(SOS_TaskPtr_t SOS_Task, uint16 u16_period, uint8 u8_priority)
{
	uint8 u8_retval = SOS_BASE_ERR + SUCCESS;
	if (gu8_SOS_Status == SOS_INIT)
 934:	20 91 60 00 	lds	r18, 0x0060
 938:	21 11       	cpse	r18, r1
 93a:	1e c0       	rjmp	.+60     	; 0x978 <SOS_CreateTask+0x44>
	{
		if (NULL != SOS_Task)
 93c:	00 97       	sbiw	r24, 0x00	; 0
 93e:	f1 f0       	breq	.+60     	; 0x97c <SOS_CreateTask+0x48>
		{
			/* adding func to buffer*/
			str_SOS_Task_t SOS_Request = {0, u16_period, SOS_Task, u8_priority, SOS_WAIT};
			gastr_SOS_Buffer[gu8_bufferCounter] = SOS_Request;
 940:	20 91 73 00 	lds	r18, 0x0073
 944:	e2 2f       	mov	r30, r18
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	ee 0f       	add	r30, r30
 94a:	ff 1f       	adc	r31, r31
 94c:	ee 0f       	add	r30, r30
 94e:	ff 1f       	adc	r31, r31
 950:	ee 0f       	add	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	ec 58       	subi	r30, 0x8C	; 140
 956:	ff 4f       	sbci	r31, 0xFF	; 255
 958:	11 82       	std	Z+1, r1	; 0x01
 95a:	10 82       	st	Z, r1
 95c:	73 83       	std	Z+3, r23	; 0x03
 95e:	62 83       	std	Z+2, r22	; 0x02
 960:	95 83       	std	Z+5, r25	; 0x05
 962:	84 83       	std	Z+4, r24	; 0x04
 964:	46 83       	std	Z+6, r20	; 0x06
 966:	82 e0       	ldi	r24, 0x02	; 2
 968:	87 83       	std	Z+7, r24	; 0x07
			gu8_bufferCounter++;
 96a:	2f 5f       	subi	r18, 0xFF	; 255
 96c:	20 93 73 00 	sts	0x0073, r18
			/*sorting buffer by priority*/
			SOS_PrioritySort();
 970:	0e 94 ae 03 	call	0x75c	; 0x75c <SOS_PrioritySort>
 * 							
 */
ERROR_STATUS 
SOS_CreateTask(SOS_TaskPtr_t SOS_Task, uint16 u16_period, uint8 u8_priority)
{
	uint8 u8_retval = SOS_BASE_ERR + SUCCESS;
 974:	8c e8       	ldi	r24, 0x8C	; 140
 976:	08 95       	ret
		}
*/
	}
	else
	{
		u8_retval = SOS_BASE_ERR + NOT_INITIALIZED_ERR;
 978:	8e e8       	ldi	r24, 0x8E	; 142
 97a:	08 95       	ret
			/*sorting buffer by priority*/
			SOS_PrioritySort();
		}
		else
		{
			u8_retval = SOS_BASE_ERR + NULL_PTR_ERR;
 97c:	80 e9       	ldi	r24, 0x90	; 144
	else
	{
		u8_retval = SOS_BASE_ERR + NOT_INITIALIZED_ERR;
	}
	return u8_retval;	
}
 97e:	08 95       	ret

00000980 <SOS_Run>:
 * Description: This function performs the operation of the OS.
 * 							
 */
ERROR_STATUS 
SOS_Run(void)
{
 980:	bf 92       	push	r11
 982:	cf 92       	push	r12
 984:	df 92       	push	r13
 986:	ef 92       	push	r14
 988:	ff 92       	push	r15
 98a:	0f 93       	push	r16
 98c:	1f 93       	push	r17
 98e:	cf 93       	push	r28
 990:	df 93       	push	r29
	uint8 u8_retval = SOS_BASE_ERR + SUCCESS;
	if (SOS_INIT == gu8_SOS_Status)
 992:	80 91 60 00 	lds	r24, 0x0060
 996:	81 11       	cpse	r24, r1
 998:	5a c0       	rjmp	.+180    	; 0xa4e <SOS_Run+0xce>
	{
		Timer_Start(gu8_SOS_TIMER_CH, gu16_SOS_TimerCount);
 99a:	60 91 c5 00 	lds	r22, 0x00C5
 99e:	70 91 c6 00 	lds	r23, 0x00C6
 9a2:	80 91 c7 00 	lds	r24, 0x00C7
 9a6:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Timer_Start>
		gu8_timerStarted = SOS_STARTED;
 9aa:	10 92 72 00 	sts	0x0072, r1
		SOS_PrioritySort();
 9ae:	0e 94 ae 03 	call	0x75c	; 0x75c <SOS_PrioritySort>
 9b2:	04 e7       	ldi	r16, 0x74	; 116
 9b4:	10 e0       	ldi	r17, 0x00	; 0
 9b6:	0f 2e       	mov	r0, r31
 9b8:	fb e7       	ldi	r31, 0x7B	; 123
 9ba:	cf 2e       	mov	r12, r31
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	df 2e       	mov	r13, r31
 9c0:	f0 2d       	mov	r31, r0
	for (u8_index = 0; u8_index < gu8_bufferCounter; u8_index++)
	{
		if (gastr_SOS_Buffer[u8_index].u8_state == SOS_READY)
		{
			/* excuting task with highest priority*/
			gastr_SOS_Buffer[u8_index].u8_state = SOS_RUN;
 9c2:	ee 24       	eor	r14, r14
 9c4:	e3 94       	inc	r14
			gastr_SOS_Buffer[u8_index].SOS_Task();
			gastr_SOS_Buffer[u8_index].u8_state = SOS_WAIT;
 9c6:	68 94       	set
 9c8:	ff 24       	eor	r15, r15
 9ca:	f1 f8       	bld	r15, 1
		{
			#if DEBUGTEST
			DIO_Toggle(GPIOB, PIN6);
			#endif
			
			if (1 == gu8_SOS_DispatcherFlag)
 9cc:	80 91 c4 00 	lds	r24, 0x00C4
 9d0:	81 30       	cpi	r24, 0x01	; 1
 9d2:	d1 f5       	brne	.+116    	; 0xa48 <SOS_Run+0xc8>
}

static void SOS_GoToReadyState(void)
{
	uint8 u8_index;
	for (u8_index = 0; u8_index < gu8_bufferCounter; u8_index++)
 9d4:	50 91 73 00 	lds	r21, 0x0073
 9d8:	55 23       	and	r21, r21
 9da:	a1 f1       	breq	.+104    	; 0xa44 <SOS_Run+0xc4>
 9dc:	f8 01       	movw	r30, r16
 9de:	d6 01       	movw	r26, r12
 9e0:	40 e0       	ldi	r20, 0x00	; 0
	{
		/* incrementing Task counter */
		gastr_SOS_Buffer[u8_index].u16_counter++;
 9e2:	80 81       	ld	r24, Z
 9e4:	91 81       	ldd	r25, Z+1	; 0x01
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	91 83       	std	Z+1, r25	; 0x01
 9ea:	80 83       	st	Z, r24
		if (gastr_SOS_Buffer[u8_index].u16_counter == gastr_SOS_Buffer[u8_index].u16_period)
 9ec:	22 81       	ldd	r18, Z+2	; 0x02
 9ee:	33 81       	ldd	r19, Z+3	; 0x03
 9f0:	82 17       	cp	r24, r18
 9f2:	93 07       	cpc	r25, r19
 9f4:	19 f4       	brne	.+6      	; 0x9fc <SOS_Run+0x7c>
		{
			/*setting the state for ready tasks*/
			gastr_SOS_Buffer[u8_index].u8_state = SOS_READY;
 9f6:	1c 92       	st	X, r1
			gastr_SOS_Buffer[u8_index].u16_counter = 0;
 9f8:	11 82       	std	Z+1, r1	; 0x01
 9fa:	10 82       	st	Z, r1
}

static void SOS_GoToReadyState(void)
{
	uint8 u8_index;
	for (u8_index = 0; u8_index < gu8_bufferCounter; u8_index++)
 9fc:	4f 5f       	subi	r20, 0xFF	; 255
 9fe:	38 96       	adiw	r30, 0x08	; 8
 a00:	18 96       	adiw	r26, 0x08	; 8
 a02:	45 17       	cp	r20, r21
 a04:	70 f3       	brcs	.-36     	; 0x9e2 <SOS_Run+0x62>
}

static void SOS_GoToRunState(void)
{
	uint8 u8_index;
	for (u8_index = 0; u8_index < gu8_bufferCounter; u8_index++)
 a06:	80 91 73 00 	lds	r24, 0x0073
 a0a:	88 23       	and	r24, r24
 a0c:	d9 f0       	breq	.+54     	; 0xa44 <SOS_Run+0xc4>
 a0e:	b1 2c       	mov	r11, r1
	{
		if (gastr_SOS_Buffer[u8_index].u8_state == SOS_READY)
 a10:	8b 2d       	mov	r24, r11
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	fc 01       	movw	r30, r24
 a16:	ee 0f       	add	r30, r30
 a18:	ff 1f       	adc	r31, r31
 a1a:	ee 0f       	add	r30, r30
 a1c:	ff 1f       	adc	r31, r31
 a1e:	ee 0f       	add	r30, r30
 a20:	ff 1f       	adc	r31, r31
 a22:	ec 58       	subi	r30, 0x8C	; 140
 a24:	ff 4f       	sbci	r31, 0xFF	; 255
 a26:	27 81       	ldd	r18, Z+7	; 0x07
 a28:	21 11       	cpse	r18, r1
 a2a:	07 c0       	rjmp	.+14     	; 0xa3a <SOS_Run+0xba>
		{
			/* excuting task with highest priority*/
			gastr_SOS_Buffer[u8_index].u8_state = SOS_RUN;
 a2c:	ef 01       	movw	r28, r30
 a2e:	e7 82       	std	Z+7, r14	; 0x07
			gastr_SOS_Buffer[u8_index].SOS_Task();
 a30:	04 80       	ldd	r0, Z+4	; 0x04
 a32:	f5 81       	ldd	r31, Z+5	; 0x05
 a34:	e0 2d       	mov	r30, r0
 a36:	09 95       	icall
			gastr_SOS_Buffer[u8_index].u8_state = SOS_WAIT;
 a38:	ff 82       	std	Y+7, r15	; 0x07
}

static void SOS_GoToRunState(void)
{
	uint8 u8_index;
	for (u8_index = 0; u8_index < gu8_bufferCounter; u8_index++)
 a3a:	b3 94       	inc	r11
 a3c:	80 91 73 00 	lds	r24, 0x0073
 a40:	b8 16       	cp	r11, r24
 a42:	30 f3       	brcs	.-52     	; 0xa10 <SOS_Run+0x90>
			{
				/*checking if any task is ready*/
				SOS_GoToReadyState();
				/*running ready tasks*/
				SOS_GoToRunState();
				gu8_SOS_DispatcherFlag = 0;
 a44:	10 92 c4 00 	sts	0x00C4, r1
			#endif
			#if DEBUGTEST
			DIO_Toggle(GPIOB, PIN7);
			#endif
			/*putting cpu to sleep*/
			CPUSleep_enable();
 a48:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CPUSleep_enable>
			#if DEBUGTEST
			DIO_Toggle(GPIOB, PIN7);
			#endif
			
		}
 a4c:	bf cf       	rjmp	.-130    	; 0x9cc <SOS_Run+0x4c>
		u8_retval = SOS_BASE_ERR + NOT_INITIALIZED_ERR;
	}
	return u8_retval;
	
	
}
 a4e:	8e e8       	ldi	r24, 0x8E	; 142
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	1f 91       	pop	r17
 a56:	0f 91       	pop	r16
 a58:	ff 90       	pop	r15
 a5a:	ef 90       	pop	r14
 a5c:	df 90       	pop	r13
 a5e:	cf 90       	pop	r12
 a60:	bf 90       	pop	r11
 a62:	08 95       	ret

00000a64 <__tablejump2__>:
 a64:	ee 0f       	add	r30, r30
 a66:	ff 1f       	adc	r31, r31

00000a68 <__tablejump__>:
 a68:	05 90       	lpm	r0, Z+
 a6a:	f4 91       	lpm	r31, Z
 a6c:	e0 2d       	mov	r30, r0
 a6e:	09 94       	ijmp

00000a70 <_exit>:
 a70:	f8 94       	cli

00000a72 <__stop_program>:
 a72:	ff cf       	rjmp	.-2      	; 0xa72 <__stop_program>
